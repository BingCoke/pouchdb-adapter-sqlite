diff --git a/node_modules/pouchdb-errors/lib/index.js b/node_modules/pouchdb-errors/lib/index.js
index f271755..7fe57bd 100644
--- a/node_modules/pouchdb-errors/lib/index.js
+++ b/node_modules/pouchdb-errors/lib/index.js
@@ -1,13 +1,8 @@
-'use strict';
-
-Object.defineProperty(exports, '__esModule', { value: true });
-
 class PouchError extends Error {
-  constructor(status, error, reason) {
-    super();
+  constructor(status, name, message) {
+    super(message);
     this.status = status;
-    this.name = error;
-    this.message = reason;
+    this.name = name;
     this.error = true;
   }
 
@@ -21,52 +16,55 @@ class PouchError extends Error {
   }
 }
 
-var UNAUTHORIZED = new PouchError(401, 'unauthorized', "Name or password is incorrect.");
-var MISSING_BULK_DOCS = new PouchError(400, 'bad_request', "Missing JSON list of 'docs'");
-var MISSING_DOC = new PouchError(404, 'not_found', 'missing');
-var REV_CONFLICT = new PouchError(409, 'conflict', 'Document update conflict');
-var INVALID_ID = new PouchError(400, 'bad_request', '_id field must contain a string');
-var MISSING_ID = new PouchError(412, 'missing_id', '_id is required for puts');
-var RESERVED_ID = new PouchError(400, 'bad_request', 'Only reserved document ids may start with underscore.');
-var NOT_OPEN = new PouchError(412, 'precondition_failed', 'Database not open');
-var UNKNOWN_ERROR = new PouchError(500, 'unknown_error', 'Database encountered an unknown error');
-var BAD_ARG = new PouchError(500, 'badarg', 'Some query argument is invalid');
-var INVALID_REQUEST = new PouchError(400, 'invalid_request', 'Request was invalid');
-var QUERY_PARSE_ERROR = new PouchError(400, 'query_parse_error', 'Some query parameter is invalid');
-var DOC_VALIDATION = new PouchError(500, 'doc_validation', 'Bad special document member');
-var BAD_REQUEST = new PouchError(400, 'bad_request', 'Something wrong with the request');
-var NOT_AN_OBJECT = new PouchError(400, 'bad_request', 'Document must be a JSON object');
-var DB_MISSING = new PouchError(404, 'not_found', 'Database not found');
-var IDB_ERROR = new PouchError(500, 'indexed_db_went_bad', 'unknown');
-var WSQ_ERROR = new PouchError(500, 'web_sql_went_bad', 'unknown');
-var LDB_ERROR = new PouchError(500, 'levelDB_went_went_bad', 'unknown');
-var FORBIDDEN = new PouchError(403, 'forbidden', 'Forbidden by design doc validate_doc_update function');
-var INVALID_REV = new PouchError(400, 'bad_request', 'Invalid rev format');
-var FILE_EXISTS = new PouchError(412, 'file_exists', 'The database could not be created, the file already exists.');
-var MISSING_STUB = new PouchError(412, 'missing_stub', 'A pre-existing attachment stub wasn\'t found');
-var INVALID_URL = new PouchError(413, 'invalid_url', 'Provided URL is invalid');
+const UNAUTHORIZED = { status:401, name:'unauthorized', message:"Name or password is incorrect." };
+const MISSING_BULK_DOCS = { status:400, name:'bad_request', message:"Missing JSON list of 'docs'" };
+const MISSING_DOC = { status:404, name:'not_found', message:'missing' };
+const REV_CONFLICT = { status:409, name:'conflict', message:'Document update conflict' };
+const INVALID_ID = { status:400, name:'bad_request', message:'_id field must contain a string' };
+const MISSING_ID = { status:412, name:'missing_id', message:'_id is required for puts' };
+const RESERVED_ID = { status:400, name:'bad_request', message:'Only reserved document ids may start with underscore.' };
+const NOT_OPEN = { status:412, name:'precondition_failed', message:'Database not open' };
+const UNKNOWN_ERROR = { status:500, name:'unknown_error', message:'Database encountered an unknown error' };
+const BAD_ARG = { status:500, name:'badarg', message:'Some query argument is invalid' };
+const INVALID_REQUEST = { status:400, name:'invalid_request', message:'Request was invalid' };
+const QUERY_PARSE_ERROR = { status:400, name:'query_parse_error', message:'Some query parameter is invalid' };
+const DOC_VALIDATION = { status:500, name:'doc_validation', message:'Bad special document member' };
+const BAD_REQUEST = { status:400, name:'bad_request', message:'Something wrong with the request' };
+const NOT_AN_OBJECT = { status:400, name:'bad_request', message:'Document must be a JSON object' };
+const DB_MISSING = { status:404, name:'not_found', message:'Database not found' };
+const IDB_ERROR = { status:500, name:'indexed_db_went_bad', message:'unknown' };
+const WSQ_ERROR = { status:500, name:'web_sql_went_bad', message:'unknown' };
+const LDB_ERROR = { status:500, name:'levelDB_went_went_bad', message:'unknown' };
+const FORBIDDEN = { status:403, name:'forbidden', message:'Forbidden by design doc validate_doc_update function' };
+const INVALID_REV = { status:400, name:'bad_request', message:'Invalid rev format' };
+const FILE_EXISTS = { status:412, name:'file_exists', message:'The database could not be created, the file already exists.' };
+const MISSING_STUB = { status:412, name:'missing_stub', message:'A pre-existing attachment stub wasn\'t found' };
+const INVALID_URL = { status:413, name:'invalid_url', message:'Provided URL is invalid' };
+
+const PROTECTED_PROPS = new Set([
+  'status',
+  'name',
+  'message',
+  'stack',
+]);
 
 function createError(error, reason) {
-  function CustomPouchError(reason) {
-    // inherit error properties from our parent error manually
-    // so as to allow proper JSON parsing.
-    var names = Object.getOwnPropertyNames(error);
-    for (var i = 0, len = names.length; i < len; i++) {
-      if (typeof error[names[i]] !== 'function') {
-        this[names[i]] = error[names[i]];
-      }
-    }
+  const pouchError = new PouchError(error.status, error.name, error.message);
 
-    if (this.stack === undefined) {
-      this.stack = (new Error()).stack;
+  // inherit error properties from our parent error manually
+  // so as to allow proper JSON parsing.
+  for (const name of Object.getOwnPropertyNames(error)) {
+    if (typeof error[name] === 'function' || PROTECTED_PROPS.has(name)) {
+      continue;
     }
+    pouchError[name] = error[name];
+  }
 
-    if (reason !== undefined) {
-      this.reason = reason;
-    }
+  if (reason !== undefined) {
+    pouchError.reason = reason;
   }
-  CustomPouchError.prototype = PouchError.prototype;
-  return new CustomPouchError(reason);
+
+  return pouchError;
 }
 
 function generateErrorFromResponse(err) {
@@ -101,29 +99,31 @@ function generateErrorFromResponse(err) {
   return err;
 }
 
-exports.UNAUTHORIZED = UNAUTHORIZED;
-exports.MISSING_BULK_DOCS = MISSING_BULK_DOCS;
-exports.MISSING_DOC = MISSING_DOC;
-exports.REV_CONFLICT = REV_CONFLICT;
-exports.INVALID_ID = INVALID_ID;
-exports.MISSING_ID = MISSING_ID;
-exports.RESERVED_ID = RESERVED_ID;
-exports.NOT_OPEN = NOT_OPEN;
-exports.UNKNOWN_ERROR = UNKNOWN_ERROR;
-exports.BAD_ARG = BAD_ARG;
-exports.INVALID_REQUEST = INVALID_REQUEST;
-exports.QUERY_PARSE_ERROR = QUERY_PARSE_ERROR;
-exports.DOC_VALIDATION = DOC_VALIDATION;
-exports.BAD_REQUEST = BAD_REQUEST;
-exports.NOT_AN_OBJECT = NOT_AN_OBJECT;
-exports.DB_MISSING = DB_MISSING;
-exports.WSQ_ERROR = WSQ_ERROR;
-exports.LDB_ERROR = LDB_ERROR;
-exports.FORBIDDEN = FORBIDDEN;
-exports.INVALID_REV = INVALID_REV;
-exports.FILE_EXISTS = FILE_EXISTS;
-exports.MISSING_STUB = MISSING_STUB;
-exports.IDB_ERROR = IDB_ERROR;
-exports.INVALID_URL = INVALID_URL;
-exports.createError = createError;
-exports.generateErrorFromResponse = generateErrorFromResponse;
+export {
+  UNAUTHORIZED,
+  MISSING_BULK_DOCS,
+  MISSING_DOC,
+  REV_CONFLICT,
+  INVALID_ID,
+  MISSING_ID,
+  RESERVED_ID,
+  NOT_OPEN,
+  UNKNOWN_ERROR,
+  BAD_ARG,
+  INVALID_REQUEST,
+  QUERY_PARSE_ERROR,
+  DOC_VALIDATION,
+  BAD_REQUEST,
+  NOT_AN_OBJECT,
+  DB_MISSING,
+  WSQ_ERROR,
+  LDB_ERROR,
+  FORBIDDEN,
+  INVALID_REV,
+  FILE_EXISTS,
+  MISSING_STUB,
+  IDB_ERROR,
+  INVALID_URL,
+  createError,
+  generateErrorFromResponse
+};
